{"version":3,"sources":["components/PersonForm.js","components/PersonCard.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","props","useState","firstName","lastName","email","password","confirm","submitted","state","setState","fnameVal","lnameVal","emailVal","passVal","confirmVal","changeHandler","e","target","name","value","message","length","className","onSubmit","preventDefault","console","log","htmlFor","type","onChange","PersonCard","person","Wrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e03c2f64.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst PersonForm = props => {\n    const [state, setState] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        confirm: \"\",\n        submitted: false\n    });\n\n    let fnameVal = \" \";\n    let lnameVal = \" \";\n    let emailVal = \" \";\n    let passVal = \" \";\n    let confirmVal = \" \";\n\n    const changeHandler = e => {\n        setState({\n            ...state, \n            [e.target.name]: e.target.value\n        });\n\n        props.setState({\n            ...state\n        })\n        // console.log(e.target.name)\n        // console.log(e.target.value)\n        // console.log(state);\n    }\n\n    const submitHandler = e => {\n        e.preventDefault();\n        \n        if( fnameVal.length === 0 && \n            lnameVal.length === 0 && \n            emailVal.length === 0 && \n            passVal.length === 0 && \n            confirmVal.length === 0) {\n\n            setState({\n                ...state,\n                submitted: true,\n                firstName: \"\",\n                lastName: \"\",\n                email: \"\",\n                password: \"\",\n                confirm: \"\",\n            });\n        }\n        \n        console.log(state);\n    }\n\n    let message = <h1>You have not submitted the form</h1>\n    if (state.submitted){\n        message = <h1>You have submitted the form</h1>\n    }\n\n    // let fnameVal;\n    if(state.firstName.length > 0)\n        fnameVal = <h5 className=\"text-danger\">First name must be at least 2 characters</h5>;\n    if(state.firstName.length >=2)\n        fnameVal = \"\";\n\n    // let lnameVal;\n    if(state.lastName.length > 0)\n        lnameVal = <h5 className=\"text-danger\">Last name must be at least 2 characters</h5>;\n    if(state.lastName.length >=2)\n        lnameVal = \"\";\n\n    // let emailVal;\n    if(state.email.length > 0) \n        emailVal = <h5 className=\"text-danger\">Email must be at least 5 characters.</h5>;\n    if(state.email.length >= 5) \n        emailVal = \"\";\n    \n    // let passVal;\n    if(state.password.length > 0) \n        passVal = <h5 className=\"text-danger\">Password must be at least 8 characters.</h5>;\n    if(state.password.length >=8)\n        passVal = \"\";\n\n    // let confirmVal;\n    if(state.password.length > 0 && state.confirm.length > 0)\n        confirmVal = <h5 className=\"text-danger\">Passwords must match.</h5>;\n    if(state.password  === state.confirm)\n        confirmVal = \"\";\n\n\n\n    return (\n        <form onSubmit={submitHandler}>\n            {message}\n            <div className=\"form-group\">\n                <label htmlFor=\"firstName\">First Name:</label>\n                <input \n                    type=\"text\"\n                    name=\"firstName\"\n                    className=\"form-control\"\n                    value={state.firstName}\n                    onChange={changeHandler}\n                />\n                {fnameVal}\n            </div>\n            \n            <div className=\"form-group\">\n                <label htmlFor=\"lastName\">Last Name:</label>\n                <input \n                    type=\"text\"\n                    name=\"lastName\"\n                    className=\"form-control\"\n                    value={state.lastName}\n                    onChange={changeHandler}\n                />\n                {lnameVal}\n            </div>\n            \n            <div className=\"form-group\">\n                <label htmlFor=\"email\">Email:</label>\n                <input \n                    type=\"email\"\n                    name=\"email\"\n                    className=\"form-control\"\n                    value={state.email}\n                    onChange={changeHandler}\n                />\n                {emailVal}\n            </div>\n            \n            <div className=\"form-group\">\n                <label htmlFor=\"password\">Password:</label>\n                <input \n                    type=\"password\"\n                    name=\"password\"\n                    className=\"form-control\"\n                    value={state.password}\n                    onChange={changeHandler}\n                />\n                {passVal}\n                {confirmVal}\n            </div>\n            \n            <div className=\"form-group\">\n                <label htmlFor=\"confirm\">Confirm Password:</label>\n                <input \n                    type=\"password\"\n                    name=\"confirm\"\n                    className=\"form-control\"\n                    value={state.confirm}\n                    onChange={changeHandler}\n                />\n\n            </div>\n\n             <button type=\"submit\" className=\"btn btn-outline btn-outline-danger\">Submit</button>\n        </form>\n    );\n}\n\nexport default PersonForm;","import React from 'react';\n\nconst PersonCard = ({ person }) => {\n    // console.log(\"these are the props \" + props.person.firstName);\n    return (\n        <>\n            <div className=\"card p-3 mt-3\">\n                <h1 className=\"font-weight-light\">Your form data</h1>\n                <p><strong>First Name: </strong> {person.firstName}</p>\n                <p><strong>Last Name:</strong> {person.lastName}</p>\n                <p><strong>Email:</strong> {person.email}</p>\n                <p><strong>Password:</strong> Password</p>\n                <p><strong>Confirm:</strong> Password</p>\n            </div>\n        </>\n    );\n}\n\nexport default PersonCard;","import React, { useState } from 'react';\n\nimport PersonForm from './PersonForm'\nimport PersonCard from './PersonCard'\n\nconst Wrapper = props => {\n    const [state, setState] = useState('');\n    // console.log(state);\n\n    return (\n        <>\n            <h1 className=\"display-4\">Hook Form</h1>\n\n            <PersonForm\n                state={state}\n                setState={setState}\n            />\n        \n            <PersonCard\n                // state={state}\n                person={state}\n            />\n        </>\n    );\n}\n\nexport default Wrapper;","import React from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper'\n\nfunction App() {\n  return (\n    <>\n      <div className=\"container\">\n        <Wrapper/>\n      </div>  \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}